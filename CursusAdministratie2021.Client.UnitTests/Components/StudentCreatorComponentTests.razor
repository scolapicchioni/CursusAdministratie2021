@using CursusAdministratie2021.Client.Core.Interfaces
@using CursusAdministratie2021.Shared.Models
@using FluentValidation
@using FluentValidation.Results
@using Moq
@inherits TestComponentBase

@code {
    Mock<IStudentsService> studentsServiceMock;
    Mock<IValidator<CompanyEmployee>> companyEmployeeValidatorMock;
    Mock<IValidator<PrivateCitizen>> privateCitizenValidatorMock;
    //Mock<
    void Start(Fixture fixture) {
        studentsServiceMock = new ();
        companyEmployeeValidatorMock = new();
        privateCitizenValidatorMock = new();
        fixture.Services.AddSingleton<IValidator<CompanyEmployee>>(companyEmployeeValidatorMock.Object);
        fixture.Services.AddSingleton<IValidator<PrivateCitizen>>(privateCitizenValidatorMock.Object);

        fixture.Services.AddSingleton<IStudentsService>(studentsServiceMock.Object);
    }
    Student actualStudent;
    void Setup_Should_Add(Fixture fixture) {
        Start(fixture);
    }
    void OnStudentCreated(Student student) {
        actualStudent = student;
    }
}

<Fixture Setup="@Setup_Should_Add"
         Test="@Should_AddPrivateCitizen"
         Description="Should Add Private Citizen" >
<ComponentUnderTest>
    <StudentCreatorComponent StudentCreated="OnStudentCreated"></StudentCreatorComponent>
  </ComponentUnderTest>

@code {

        void Should_AddPrivateCitizen(Fixture fixture) {
        string name = "StudentName";
        string surname = "StudentSurname";
        PrivateCitizen expectedStudent = new() { Id = 1, Name = name, Surname= surname };
        studentsServiceMock.Setup(ss => ss.CreateStudent(It.IsAny<PrivateCitizen>())).ReturnsAsync(expectedStudent);
        
        privateCitizenValidatorMock.Setup(pc => pc.Validate(It.IsAny<PrivateCitizen>())).Returns(new ValidationResult(new List<ValidationFailure>()));
        
        var cut = fixture.GetComponentUnderTest<StudentCreatorComponent>();
        
        var nameComponent = cut.Find("#Name");
        var surnameComponent = cut.Find("#Surname");
        var createComponent = cut.Find("#Create");
        nameComponent.Change(name);
        surnameComponent.Change(surname);

        createComponent.Click();

        cut.WaitForAssertion(() => {
           Assert.Equal(expectedStudent.Id, actualStudent.Id);
           Assert.Equal(expectedStudent.Surname, actualStudent.Surname);
           Assert.Equal(expectedStudent.Name, actualStudent.Name);
        });
    }
}
</Fixture>


<Fixture Setup="@Setup_Should_Add"
         TestAsync="@Should_AddCompanyEmployee"
         Description="Should Add Company Employee" >
<ComponentUnderTest>
    <StudentCreatorComponent StudentCreated="OnStudentCreated"></StudentCreatorComponent>
  </ComponentUnderTest>

@code {
        //Bedrijfmedewerker
    async Task Should_AddCompanyEmployee(Fixture fixture) {
        string name = "StudentName";
        string surname = "StudentSurname";
        string company = "StudentCompany";
        CompanyEmployee expectedStudent = new() { Id = 1, Name = name, Surname= surname };
        studentsServiceMock.Setup(ss => ss.CreateStudent(It.IsAny<CompanyEmployee>())).ReturnsAsync(expectedStudent);

        companyEmployeeValidatorMock.Setup(pc => pc.Validate(It.IsAny<CompanyEmployee>())).Returns(new ValidationResult(new List<ValidationFailure>()));
        
        var cut = fixture.GetComponentUnderTest<StudentCreatorComponent>();
        
        var togglebutton = cut.FindComponent<ToggleButtonComponent>();
        await cut.InvokeAsync(async () => await togglebutton.Instance.Toggled.InvokeAsync());
        
        var nameComponent = cut.Find("#Name");
        var surnameComponent = cut.Find("#Surname");
        var companyComponent = cut.Find("#Company");
        var createComponent = cut.Find("#Create");
        nameComponent.Change(name);
        surnameComponent.Change(surname);
        companyComponent.Change(company);

        createComponent.Click();

        cut.WaitForAssertion(() => {
           Assert.Equal(expectedStudent.Id, actualStudent.Id);
           Assert.Equal(expectedStudent.Surname, actualStudent.Surname);
           Assert.Equal(expectedStudent.Name, actualStudent.Name);
        });
    }
}
</Fixture>