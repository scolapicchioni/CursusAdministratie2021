@using CursusAdministratie2021.Client.Core.Interfaces
@using CursusAdministratie2021.Shared.Models
@using CursusAdministratie2021.Shared.Validators
@using FluentValidation
@inject IStudentsService studentsService
@inject IValidator<PrivateCitizen> privateCitizenValidator
@inject IValidator<CompanyEmployee> companyEmployeeValidator
<section class="form">
    <label class="form__label">Naam</label>
    <input type="text" id="Name" @bind-value="Name" />
    <label class="form__label">Achternaam</label>
    <input type="text" id="Surname" @bind-value="Surname" />

    <ToggleButtonComponent Option1="@option1" Option2="@option2" Value="@selectedOption" Toggled="OnToggled"></ToggleButtonComponent>

    @if (selectedOption == option1) {
        <label class="form__label">Straatnaam</label>
        <input type="text" id="StreetName" @bind-value="StreetName" />
        <label class="form__label">Huisnummer</label>
        <input type="text" id="HouseNumber" @bind-value="HouseNumber" />
        <label class="form__label">Postcode</label>
        <input type="text" id="ZipCode" @bind-value="ZipCode" />
        <label class="form__label">Woonplaats</label>
        <input type="text" id="City" @bind-value="City" />
        <label class="form__label">IBAN</label>
        <input type="text" id="IBAN" @bind-value="IBAN" /> 
    } else {
        <label class="form__label">Bedrijfsnaam</label>
        <input type="text" id="Company" @bind-value="Company" />
        <label class="form__label">Afdeling</label>
        <input type="text" id="Department" @bind-value="Department" />
        <label class="form__label">Offertenummer</label>
        <input type="text" id="Quotation" @bind-value="Quotation" />
    }

    <button id="Create" @onclick="Create">Toevoegen</button>
    @if (errors is not null) {
        <ul>
            @foreach (string error in errors) {
            <li>@error</li>    
            }
        </ul>
    }    
<p>@message</p>
</section>



@code {
    string message = "";

    string Name;
    string Surname;

    string StreetName;
    string HouseNumber;
    string ZipCode;
    string City;
    string IBAN;

    string Company;
    string Department;
    string Quotation;

    [Parameter]
    public EventCallback<Student> StudentCreated { get; set; }

    Student student;
    string option1 = "Particulier";
    string option2 = "Bedrijfmedewerker";

    string selectedOption = "Particulier";
    FluentValidation.Results.ValidationResult results;
    List<string> errors => results?.Errors.Select(r => r.ErrorMessage).ToList();

    async Task Create() {
        
        if (selectedOption == option1) {
            PrivateCitizen privateCitizen = new PrivateCitizen() { Name = Name, Surname = Surname, StreetName = StreetName, HouseNumber = HouseNumber, ZipCode = ZipCode, City = City, IBAN = IBAN };
            results = privateCitizenValidator.Validate(privateCitizen);
            if (results.IsValid) {
                student = await studentsService.CreateStudent(privateCitizen);    
                if (StudentCreated.HasDelegate) await StudentCreated.InvokeAsync(student);
            }
        } else {
            CompanyEmployee companyEmployee = new CompanyEmployee() { Name = Name, Surname = Surname, Company = Company, Department = Department, Quotation = Quotation };
            results = companyEmployeeValidator.Validate(companyEmployee);
            if (results.IsValid) {
                student = await studentsService.CreateStudent(companyEmployee);
                if (StudentCreated.HasDelegate) await StudentCreated.InvokeAsync(student);
            } 
        }
    }

    void OnToggled(string value) {
        if (value == option1) {
            student = new PrivateCitizen() { Name=Name, Surname = Surname, StreetName = StreetName, HouseNumber = HouseNumber, ZipCode = ZipCode, City = City, IBAN = IBAN };
        } else {
            student = new CompanyEmployee() { Name=Name, Surname = Surname, Company = Company, Department = Department, Quotation = Quotation };
        }
        selectedOption = value;
    }
}
