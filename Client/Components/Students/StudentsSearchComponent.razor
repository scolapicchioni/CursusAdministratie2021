@using CursusAdministratie2021.Client.Core.Interfaces
@using CursusAdministratie2021.Shared.Models
@inject IStudentsService studentsService

<section class="form">
    <label class="form__label">Naam</label>
    <input type="text" id="Name" @bind-value="Name" />
    <label class="form__label">Achternaam</label>
    <input type="text" id="Surname" @bind-value="Surname" />
    <label class="form__label">Bedrijfsnaam</label>
    <input type="text" id="CompanyName" @bind-value="CompanyName" />
    <button id="Search" @onclick="Search">Opzoeken</button>
</section>

@code {
    string Name;
    string Surname;
    string CompanyName;

    [Parameter]
    public EventCallback<List<Student>> StudentsFound { get; set; }

    [Parameter]
    public EventCallback<List<CompanyEmployee>> CompanyEmployeesFound { get; set; }

    [Parameter]
    public EventCallback<List<PrivateCitizen>> PrivateCitizensFound { get; set; }

    async Task Search() {
        List<CompanyEmployee> employeesFound = null;
        List<Student> studentsFound = null;
        List<PrivateCitizen> citizensFound = null;
        
        if (CompanyEmployeesFound.HasDelegate) {
            employeesFound = await studentsService.FindCompanyEmployeesBy(Name, Surname, CompanyName);
            await CompanyEmployeesFound.InvokeAsync(employeesFound);    
        }

        if (string.IsNullOrWhiteSpace(CompanyName)) {
            if (StudentsFound.HasDelegate) {
                studentsFound = await studentsService.FindStudentsBy(Name, Surname);
            }

            if (PrivateCitizensFound.HasDelegate) {
                citizensFound = await studentsService.FindPrivateCitizensBy(Name, Surname);
            }
        }
        
        if (StudentsFound.HasDelegate) {
            await StudentsFound.InvokeAsync(studentsFound);        
        }
        if (PrivateCitizensFound.HasDelegate) {
            await PrivateCitizensFound.InvokeAsync(citizensFound);
        }
    }
}
