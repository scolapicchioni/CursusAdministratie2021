@using CursusAdministratie2021.Client.Core.Interfaces
@using CursusAdministratie2021.Shared.DTO
@using CursusAdministratie2021.Shared.Interfaces
@using CursusAdministratie2021.Shared.Models
@inject ICoursesOverviewService coursesOverviewService
@inject IEnrollmentService enrollmentService
@page "/enroll-to-edition/{EditionId:int}"

<h1>Cursus Inschrijven</h1>

@if (courseOverview is not null) {
    <h2>Cursus</h2>
    <CourseOverviewDetailsComponent CourseOverview="@courseOverview"></CourseOverviewDetailsComponent>

    <h2>Cursist</h2>
    @if (!studentSelected) {
        <section class="form">
            <ToggleButtonComponent Option1="Opzoeken" Option2="Nieuw" Value="@option" Toggled="OnToggleButtonToggled"></ToggleButtonComponent>
        </section>
        @if (option == "Opzoeken") {
            <h2>Opzoeken</h2>
            <StudentsSearchComponent CompanyEmployeesFound="@(ces=>CompanyEmployees=ces)" PrivateCitizensFound="@(pcs=>PrivateCitizens=pcs)"></StudentsSearchComponent>
            <CompanyEmployeeSelectorComponent CompanyEmployees="CompanyEmployees" CompanyEmployeeSelected="@SelectStudent"></CompanyEmployeeSelectorComponent>
            <PrivateCitizenSelectorComponent PrivateCitizens="PrivateCitizens" PrivateCitizenSelected="@SelectStudent"></PrivateCitizenSelectorComponent>
        }else {
            <h2>Nieuw</h2>
            <StudentCreatorComponent StudentCreated="@SelectStudent"></StudentCreatorComponent>
        }

    }  
    @if (studentSelected && Student is not null && courseOverview is not null) {

        <StudentDetailsComponent Student="Student"></StudentDetailsComponent>
        <section class="form">
            <button @onclick="Enroll">@Student.Name @Student.Surname inschrijven voor @courseOverview.Title van @courseOverview.StartDate.ToString("dd/MM/yyyy")</button>
            <button @onclick="@(()=>SelectStudent(null))">Terug</button>
        </section>
    }
}
<p>@message</p>


@code {
    bool studentSelected = false;
    string message;
    string option = "Opzoeken";

    [Parameter]
    public int EditionId { get; set; }

    CourseOverview courseOverview;

    List<CompanyEmployee> CompanyEmployees;
    List<PrivateCitizen> PrivateCitizens;
    Student Student;

    protected override async Task OnInitializedAsync() {
        try {
            courseOverview = await coursesOverviewService.GetCourseOverviewByEditionId(EditionId);
        } catch (Exception) {
            message = "Cursusinstantie niet gevonden.";
        }
    }

    void OnToggleButtonToggled(string value) {
        option = value;
        SelectStudent(null);
    }

    void SelectStudent(Student student) {
        Student = student;
        studentSelected = student is not null;
    }

    async Task Enroll() {
        message = "";
        try {
            await enrollmentService.EnrollStudentToEdition(Student.Id, EditionId);
            message = "Student ingeschreven.";
            courseOverview.EnrollmentsCount++;
            SelectStudent(null);
        } catch (Exception ex) {
            message = ex.Message;            
        }
    }
}
