@using CursusAdministratie2021.Client.Core.Interfaces
@using CursusAdministratie2021.Shared.DTO
@using CursusAdministratie2021.Shared.Interfaces
@using CursusAdministratie2021.Shared.Models
@inject ICoursesOverviewService coursesOverviewService
@inject IEnrollmentService enrollmentService
@page "/enroll-to-edition/{EditionId:int}"

@if (courseOverview is not null) {
<CourseOverviewDetailsComponent CourseOverview="@courseOverview"></CourseOverviewDetailsComponent>

<ToggleButtonComponent Option1="Opzoeken" Option2="Nieuw" Value="@option" Toggled="OnToggleButtonToggled"></ToggleButtonComponent>

@if (option == "Opzoeken") {
    <StudentsSearchComponent StudentsFound="@(ss=>Students=ss)"></StudentsSearchComponent>
    <StudentSelectorComponent Students="Students" StudentSelected="@(s=>Student=s)"></StudentSelectorComponent>
}else{
    <StudentCreatorComponent StudentCreated="@(s=>Student=s)"></StudentCreatorComponent>
}

@if(Student is not null && courseOverview is not null) {
    <button @onclick="Enroll">@Student.Name @Student.Surname inschrijven voor @courseOverview.Title van @courseOverview.StartDate.ToString("dd/MM/yyyy")</button>
}
}else {
    <p>Selecteer een cursusistantie en een cursist</p>
}

<p>@message</p>


@code {
    string message;
    string option = "Opzoeken";

    [Parameter]
    public int EditionId { get; set; }

    CourseOverview courseOverview;

    List<Student> Students;
    Student Student;

    protected override async Task OnInitializedAsync() {
        try {
            courseOverview = await coursesOverviewService.GetCourseOverviewByEditionId(EditionId);
        } catch (Exception) {
            message = "Cursusinstantie niet gevonden.";
        }
    }

    void OnToggleButtonToggled(string value) {
        option = value;

    }

    async Task Enroll() {
        message = "";
        try {
            await enrollmentService.EnrollStudentToEdition(Student.Id, EditionId);
            message = "Student ingeschreven.";
            courseOverview.EnrollmentsCount++;
        } catch (Exception ex) {
            message = ex.Message;            
        }
    }
}
